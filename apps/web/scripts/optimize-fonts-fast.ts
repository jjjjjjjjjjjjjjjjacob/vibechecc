#!/usr/bin/env bun

/**
 * Ultra-fast font optimization using Bun's native capabilities
 * and parallel processing
 */

import { mkdirSync } from 'fs';
import { join, dirname } from 'path';

const __dirname = dirname(Bun.fileURLToPath(import.meta.url));
const PUBLIC_FONTS_DIR = join(__dirname, '../public/fonts');
const OPTIMIZED_FONTS_DIR = join(PUBLIC_FONTS_DIR, 'optimized');
const CSS_OUTPUT = join(__dirname, '../src/styles/fonts.css');

// Only process non-emoji fonts for speed
const FONTS = [
  {
    name: 'GeistSans',
    file: 'GeistSans-Variable.woff2',
    weight: '100 900',
    unicodeRange:
      'U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD',
  },
  {
    name: 'GeistMono',
    file: 'GeistMono-Variable.woff2',
    weight: '100 900',
    unicodeRange:
      'U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD',
  },
];

async function generateCSS() {
  let css = `/* Fast Font Loading - Generated by optimize-fonts-fast.ts */

/* Import optimized fonts from the Python script for complex subsetting */
@import './fonts-full.css';

/* Override with fast-loaded versions for critical fonts */
`;

  for (const font of FONTS) {
    css += `@font-face {
  font-family: '${font.name}';
  src: url('/fonts/${font.file}') format('woff2');
  font-weight: ${font.weight};
  font-style: normal;
  font-display: swap;
  unicode-range: ${font.unicodeRange};
}

`;
  }

  css += `/* Font Stacks - Using native system fonts for emoji */
:root {
  --font-sans: 'GeistSans', system-ui, -apple-system, sans-serif;
  --font-mono: 'GeistMono', ui-monospace, monospace;
  --font-display: 'Doto', system-ui, sans-serif;
  --font-emoji: 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
}`;

  await Bun.write(CSS_OUTPUT, css);
}

async function main() {
  // console.log('âš¡ Ultra-Fast Font Setup\n');
  // const start = performance.now();

  mkdirSync(OPTIMIZED_FONTS_DIR, { recursive: true });

  // For WOFF2 fonts that are already optimized, just use them directly
  // console.log('âœ… Using pre-optimized WOFF2 fonts directly');
  // console.log('âœ… System emoji fonts for best performance');

  // Generate minimal CSS
  await generateCSS();
  // console.log('âœ… Generated optimized CSS');

  // const duration = ((performance.now() - start) / 1000).toFixed(3);
  // console.log(`\nâš¡ Completed in ${duration}s!`);

  // console.log('\nðŸ’¡ Tips for faster font loading:');
  // console.log('1. WOFF2 fonts are already compressed - no need to re-process');
  // console.log('2. Use system emoji fonts to avoid 20MB+ downloads');
  // console.log(
  //   '3. For custom fonts like Doto, run the Python script separately'
  // );
  // console.log('4. Consider using a CDN for font delivery');
}

main().catch((_e) => {
  // console.error(e);
  process.exit(1);
});
