import { createFileRoute } from '@tanstack/react-router'
import { createAPIFileRoute } from '@tanstack/react-start';
import { 
  generateOGImageSVG, 
  OG_TEMPLATES, 
  type OGImageConfig 
} from '@/utils/og-image-generator';

/**
 * Dynamic OG Image Generation API Route
 * 
 * This route generates dynamic Open Graph images for various content types.
 * It supports SVG generation with fallback for different environments.
 * 
 * Usage: GET /api/og?title=...&type=...&description=...
 */
export const Route = createAPIFileRoute('/api/og')({
  GET: async ({ request }: { request: Request }) => {
    try {
      const url = new URL(request.url);
      const searchParams = url.searchParams;

      // Extract parameters from query string
      const config: OGImageConfig = {
        title: searchParams.get('title') || 'viberater',
        description: searchParams.get('description') || undefined,
        author: searchParams.get('author') || undefined,
        emoji: searchParams.get('emoji') || undefined,
        tags: searchParams.get('tags')?.split(',').filter(Boolean) || undefined,
        image: searchParams.get('image') || undefined,
        type: (searchParams.get('type') as OGImageConfig['type']) || 'home',
        theme: (searchParams.get('theme') as 'light' | 'dark') || 'light',
        primaryColor: searchParams.get('primaryColor') || undefined,
        secondaryColor: searchParams.get('secondaryColor') || undefined,
      };

      // Validate parameters
      if (!config.title || config.title.length > 200) {
        return new Response('Invalid title parameter', { status: 400 });
      }

      if (config.description && config.description.length > 300) {
        return new Response('Description too long', { status: 400 });
      }

      if (!['vibe', 'profile', 'home', 'search', 'error'].includes(config.type)) {
        return new Response('Invalid type parameter', { status: 400 });
      }

      // Generate SVG image
      const svg = generateOGImageSVG(config);

      return new Response(svg, {
        headers: {
          'Content-Type': 'image/svg+xml',
          'Cache-Control': 'public, immutable, no-transform, max-age=31536000',
        },
      });
      
    } catch (error) {
      console.error('Error generating OG image:', error);

      // Return a simple error image
      const errorSvg = `
        <svg width="1200" height="630" xmlns="http://www.w3.org/2000/svg">
          <rect width="100%" height="100%" fill="#E74C3C"/>
          <text x="60" y="300" font-size="48" fill="white" font-family="Arial, sans-serif">
            Error generating image
          </text>
          <text x="60" y="360" font-size="24" fill="rgba(255,255,255,0.8)" font-family="Arial, sans-serif">
            viberater
          </text>
        </svg>
      `;

      return new Response(errorSvg, {
        status: 500,
        headers: {
          'Content-Type': 'image/svg+xml',
          'Cache-Control': 'no-cache',
        },
      });
    }
  },
});