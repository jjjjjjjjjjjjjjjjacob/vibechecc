---
description: 
globs: 
alwaysApply: false
---
# Testing Guidelines

Based on the analysis of `convex/vibes.test.ts`, `src/components/ui/button.test.tsx`, `vitest.config.ts`, and `vitest.setup.ts`.

## General Testing Rules (Applicable to all tests):

1.  **Test Runner & Assertion:**
    *   Utilize **Vitest** as the primary test runner and assertion library.
    *   Use `describe` blocks to group related tests and `it` (or `test`) blocks for individual test cases.
    *   Example: `describe('Feature X', () => { it('should do Y', () => { ... }); });`

2.  **File Naming:**
    *   Test files for TypeScript (`.ts`) modules should be named `[moduleName].test.ts`.
    *   Test files for React components (`.tsx`) should be named `[componentName].test.tsx`.

3.  **Setup File (`vitest.setup.ts`):**
    *   This file is crucial for global test configurations.
    *   It imports `@testing-library/jest-dom/vitest` to add Jest-DOM matchers (like `toBeInTheDocument`, `toHaveClass`, etc.) to Vitest's `expect`.
    *   It registers `happy-dom` globally using `GlobalRegistrator.register()` for DOM simulation in tests.
    *   It exports `modules` using `import.meta.glob("./**/!(*.*.*)*.*s")` for use with `convex-test` to load Convex function modules.
    *   Ensure any new global setup or polyfills are added here.

4.  **Configuration File (`vitest.config.ts`):**
    *   Specifies `environment: 'happy-dom'` to ensure tests run in a DOM-like environment.
    *   Lists `vitest.setup.ts` in `setupFiles` to execute global setups before tests run.
    *   Includes `exclude: ['./node_modules']` to prevent tests from running within the `node_modules` directory.

## Frontend Component Testing Rules (e.g., `button.test.tsx`):

1.  **Core Library:**
    *   Use **`@testing-library/react`** for rendering components and simulating user interactions.
    *   Import necessary functions like `render`, `screen`, `fireEvent`, and `cleanup`.

2.  **DOM Reference:**
    *   Include `/// <reference lib="dom" />` at the top of `.tsx` test files if direct DOM APIs are needed, though `@testing-library/react` and `jest-dom` matchers often cover most needs.

3.  **Queries & Assertions:**
    *   Use `screen` queries (e.g., `screen.getByRole`, `screen.getByText`, `screen.queryByRole`) to find elements in the rendered component. Prioritize role-based queries for accessibility.
    *   Use Jest-DOM matchers provided via `@testing-library/jest-dom/vitest` for assertions related to DOM state (e.g., `expect(element).toBeInTheDocument()`, `expect(button).toBeDisabled()`).

4.  **User Interactions:**
    *   Use `fireEvent` (e.g., `fireEvent.click(buttonElement)`) to simulate user events.

5.  **Mocking:**
    *   Use `vi.fn()` from Vitest to create mock functions for event handlers or other callbacks.
    *   Assert mock function calls (e.g., `expect(handleClick).toHaveBeenCalledTimes(1)`).

6.  **Cleanup:**
    *   Use `afterEach(cleanup)` from `@testing-library/react` to unmount components and clean up the JSDOM environment after each test, preventing state leakage between tests.

7.  **Testing Props and Variants:**
    *   Test how components render and behave with different props (e.g., `variant`, `size`, `disabled`, `asChild`).
    *   For the `asChild` prop, verify that the component renders as the child element and not its default tag (e.g., an `<a>` tag instead of `<button>`).

## Backend/API Testing Rules (Convex - e.g., `vibes.test.ts`):

1.  **Core Library:**
    *   Use **`convex-test`** for testing Convex mutations and queries.
    *   Import `convexTest` from `convex-test`.

2.  **Setup:**
    *   Initialize the test environment using `const t = convexTest(schema, modules);`
        *   `schema`: Your Convex schema definition (e.g., `import schema from './schema';`).
        *   `modules`: The Convex functions imported from `vitest.setup.ts` (e.g., `import { modules } from '../vitest.setup';`).

3.  **Calling Convex Functions:**
    *   Use `t.mutation(api.backendModule.mutationName, arguments)` to test mutations.
    *   Use `t.query(api.backendModule.queryName, arguments)` to test queries.
    *   `api` refers to your typed API methods (e.g., `import { api } from './_generated/api';`).

4.  **Assertions:**
    *   Assert the return values of mutations and queries (e.g., `expect(vibeId).toBeTypeOf('string')`).
    *   Verify data integrity by querying the database after mutations and checking the state of the data (e.g., fetching a created item and comparing its properties).
    *   Test edge cases, such as creating entities with and without optional fields.

5.  **Data Verification:**
    *   When verifying created/updated data, ensure all relevant fields are checked.
    *   For arrays, use matchers like `toEqual(expect.arrayContaining(expectedArray))` if order doesn't matter or `toEqual(expectedArray)` if it does.
