name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Environment to deploy to (development, production, ephemeral)'
      branch:
        required: true
        type: string
        description: 'Branch being deployed'
      pr_number:
        required: false
        type: string
        description: 'PR number for ephemeral deployments'
      version:
        required: false
        type: string
        description: 'Version being deployed'

jobs:
  deploy-terraform:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.branch == 'main' && 'main' || 'dev' }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ inputs.environment }}-${{ hashFiles('terraform/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ inputs.environment }}-

      - name: Determine workspace and environment variables
        id: env
        run: |
          if [ "${{ inputs.environment }}" = "ephemeral" ]; then
            echo "workspace=pr-${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.environment }}" = "production" ]; then
            echo "workspace=production" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.environment }}" = "development" ]; then
            echo "workspace=development" >> $GITHUB_OUTPUT
          fi

      - name: Generate backend configuration
        working-directory: terraform
        env:
          R2_BUCKET: ${{ vars.CLOUDFLARE_R2_BUCKET }}
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_zone: ${{ vars.CLOUDFLARE_ZONE }}
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_pr_number: ${{ inputs.pr_number }}
          R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        run: |
          chmod +x ./generate-backend-config.sh
          ./generate-backend-config.sh

      - name: Initialize Terraform with backend
        working-directory: terraform
        run: |
          terraform init -backend-config=backend.tfvars

      - name: Create or select workspace
        working-directory: terraform
        run: |
          terraform workspace select ${{ steps.env.outputs.workspace }} || terraform workspace new ${{ steps.env.outputs.workspace }}

      - name: Import existing Cloudflare resources
        id: import_resources
        working-directory: terraform
        env:
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_zone: ${{ vars.CLOUDFLARE_ZONE }}
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_pr_number: ${{ inputs.pr_number }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          chmod +x ./import-existing-resources.sh
          ./import-existing-resources.sh

      - name: Terraform Apply
        working-directory: terraform
        env:
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_zone: ${{ vars.CLOUDFLARE_ZONE }}
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_pr_number: ${{ inputs.pr_number }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        run: |
          terraform apply -auto-approve

  deploy-convex:
    runs-on: ubuntu-latest
    needs: deploy-terraform
    environment:
      name: ${{ inputs.branch == 'main' && 'main' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Configure Convex
        working-directory: apps/convex
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
        run: bunx convex dev --configure=existing --project ${{ secrets.CONVEX_PROJECT_SLUG }} --dev-deployment cloud --once

      # Set Convex environment variables for backend (now in apps/convex)
      - name: Set Environment Variables
        working-directory: apps/convex
        env:
          CONVEX_DEPLOYMENT: ${{ secrets.CONVEX_DEPLOYMENT_NAME }}
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
        run: |
          bunx convex env --deployment-name ${{ secrets.CONVEX_DEPLOYMENT_NAME }} set CLERK_FRONTEND_API_URL ${{ secrets.CLERK_FRONTEND_API_URL }}
          bunx convex env --deployment-name ${{ secrets.CONVEX_DEPLOYMENT_NAME }} set CLERK_WEBHOOK_SIGNING_SECRET ${{ secrets.CLERK_WEBHOOK_SIGNING_SECRET }}
          bunx convex env --deployment-name ${{ secrets.CONVEX_DEPLOYMENT_NAME }} set POSTHOG_API_KEY ${{ secrets.VITE_POSTHOG_API_KEY }}
          bunx convex env --deployment-name ${{ secrets.CONVEX_DEPLOYMENT_NAME }} set POSTHOG_HOST ${{ secrets.POSTHOG_HOST }}

      # Build and deploy Convex backend
      - name: Build Convex Backend
        run: bun nx build @vibechecc/convex

      - name: Deploy Convex
        working-directory: apps/convex
        env:
          CONVEX_DEPLOYMENT: ${{ secrets.CONVEX_DEPLOYMENT_NAME }}
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
        run: |
          if [ "${{ inputs.environment }}" = "production" ]; then
            bunx convex deploy -y
          else
            echo "Skipping Convex deployment for non-production environment"
          fi

  deploy-cloudflare:
    runs-on: ubuntu-latest
    needs: deploy-convex
    environment:
      name: ${{ inputs.branch == 'main' && 'main' || 'dev' }}
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      # Build frontend for Cloudflare Workers
      - name: Build Frontend
        env:
          VITE_CONVEX_URL: ${{ secrets.VITE_CONVEX_URL }}
          CONVEX_DEPLOYMENT: ${{ secrets.CONVEX_DEPLOYMENT_NAME }}
          VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
          CLERK_FRONTEND_API_URL: ${{ secrets.CLERK_FRONTEND_API_URL }}
          VITE_POSTHOG_API_KEY: ${{ secrets.VITE_POSTHOG_API_KEY }}
          VITE_POSTHOG_API_HOST: https://us.i.posthog.com
          VITE_POSTHOG_PROJECT_ID: ${{ secrets.VITE_POSTHOG_PROJECT_ID }}
          VITE_POSTHOG_REGION: 'US Cloud'
        run: |
          echo "Building frontend for Cloudflare Workers using Nx..."
          bun nx build @vibechecc/web
          
          # Verify the output was created
          if [ ! -f "apps/web/.output/server/index.mjs" ]; then
            echo "Error: apps/web/.output/server/index.mjs not found after build"
            exit 1
          fi
          
          echo "Build successful. Output structure:"
          ls -la apps/web/.output/

      - name: Add Environment to Wrangler Config
        if: inputs.environment == 'ephemeral'
        working-directory: apps/web
        run: |
          cat >> wrangler.toml << EOF

          [env.pr-${{ inputs.pr_number }}]
          name = "vibechecc-pr-${{ inputs.pr_number }}-web"
          EOF

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: |
            deploy --env ${{ inputs.environment == 'ephemeral' && format('pr-{0}', inputs.pr_number) || inputs.environment }} --config apps/web/wrangler.toml

      - name: Update Cloudflare Secrets
        working-directory: apps/web
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          ENV_NAME="${{ inputs.environment == 'ephemeral' && format('pr-{0}', inputs.pr_number) || inputs.environment }}"
          echo ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }} | bunx wrangler secret put --env $ENV_NAME VITE_CLERK_PUBLISHABLE_KEY
          echo ${{ secrets.VITE_CONVEX_URL }} | bunx wrangler secret put --env $ENV_NAME VITE_CONVEX_URL
          echo ${{ secrets.CLERK_SECRET_KEY }} | bunx wrangler secret put --env $ENV_NAME CLERK_SECRET_KEY
          echo ${{ secrets.VITE_POSTHOG_API_KEY }} | bunx wrangler secret put --env $ENV_NAME VITE_POSTHOG_API_KEY
          echo ${{ secrets.VITE_POSTHOG_API_HOST }} | bunx wrangler secret put --env $ENV_NAME VITE_POSTHOG_API_HOST
          echo ${{ secrets.VITE_POSTHOG_PROJECT_ID }} | bunx wrangler secret put --env $ENV_NAME VITE_POSTHOG_PROJECT_ID
