name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Environment to deploy to (development, production, ephemeral)'
      branch:
        required: true
        type: string
        description: 'Branch being deployed'
      pr_number:
        required: false
        type: string
        description: 'PR number for ephemeral deployments'
      version:
        required: false
        type: string
        description: 'Version being deployed'

jobs:
  deploy-terraform:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.branch == 'main' && 'main' || inputs.branch == 'main-alt' && 'main-alt' || 'dev' }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ inputs.environment }}-${{ hashFiles('terraform/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ inputs.environment }}-

      - name: Determine workspace and environment variables
        id: env
        run: |
          if [ "${{ inputs.environment }}" = "ephemeral" ]; then
            echo "workspace=pr-${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
            echo "app_name=vibechecc" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.environment }}" = "production" ]; then
            echo "workspace=production" >> $GITHUB_OUTPUT
            echo "app_name=vibechecc" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.environment }}" = "production-alt" ]; then
            echo "workspace=production-alt" >> $GITHUB_OUTPUT
            echo "app_name=${{ vars.VITE_APP_NAME }}" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.environment }}" = "development" ]; then
            echo "workspace=development" >> $GITHUB_OUTPUT
            echo "app_name=vibechecc" >> $GITHUB_OUTPUT
          fi

      - name: Generate backend configuration
        working-directory: terraform
        env:
          R2_BUCKET: ${{ vars.CLOUDFLARE_R2_BUCKET }}
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_zone: ${{ vars.CLOUDFLARE_ZONE }}
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_pr_number: ${{ inputs.pr_number }}
          R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
          APP_NAME: ${{ steps.env.outputs.app_name }}
        run: |
          chmod +x ./generate-backend-config.sh
          ./generate-backend-config.sh

      - name: Initialize Terraform with backend
        working-directory: terraform
        run: |
          terraform init -backend-config=backend.tfvars

      - name: Create or select workspace
        working-directory: terraform
        run: |
          terraform workspace select ${{ steps.env.outputs.workspace }} || terraform workspace new ${{ steps.env.outputs.workspace }}

      - name: Import existing Cloudflare resources
        id: import_resources
        working-directory: terraform
        env:
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_zone: ${{ vars.CLOUDFLARE_ZONE }}
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_pr_number: ${{ inputs.pr_number }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          chmod +x ./import-existing-resources.sh
          ./import-existing-resources.sh

      - name: Terraform Apply
        working-directory: terraform
        env:
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_zone: ${{ vars.CLOUDFLARE_ZONE }}
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_pr_number: ${{ inputs.pr_number }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        run: |
          terraform apply -auto-approve

  deploy-convex:
    runs-on: ubuntu-latest
    needs: deploy-terraform
    environment:
      name: ${{ inputs.branch == 'main' && 'main' || inputs.branch == 'main-alt' && 'main-alt' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      # Skip configuration - CONVEX_DEPLOY_KEY handles authentication
      # - name: Configure Convex (commented out - using CONVEX_DEPLOY_KEY instead)

      # Set Convex environment variables for backend (now in apps/convex)
      - name: Set Environment Variables
        working-directory: apps/convex
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
        run: |
          echo "Setting environment variables for Convex deployment"
          bunx convex env set CLERK_FRONTEND_API_URL ${{ secrets.CLERK_FRONTEND_API_URL }}
          bunx convex env set CLERK_WEBHOOK_SECRET ${{ secrets.CLERK_WEBHOOK_SECRET }}
          # Set alternative webhook secret if available (for main-alt environment)
          if [ -n "${{ secrets.CLERK_WEBHOOK_SECRET_ALT }}" ]; then
            bunx convex env set CLERK_WEBHOOK_SECRET_ALT ${{ secrets.CLERK_WEBHOOK_SECRET_ALT }}
          fi
          bunx convex env set POSTHOG_API_KEY ${{ secrets.VITE_POSTHOG_API_KEY }}
          bunx convex env set POSTHOG_HOST ${{ secrets.POSTHOG_HOST }}

      # Build and deploy Convex backend
      - name: Build Convex Backend
        run: bun nx build @vibechecc/convex

      - name: Deploy Convex
        working-directory: apps/convex
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
        run: |
          if [ "${{ inputs.environment }}" = "production" ] || [ "${{ inputs.environment }}" = "production-alt" ]; then
            echo "Deploying to Convex using deploy key"
            echo "Environment: ${{ inputs.environment }}"
            echo "Branch: ${{ inputs.branch }}"
            
            # CONVEX_DEPLOY_KEY determines the deployment target
            # Using -y to skip confirmation and --typecheck disable to speed up deployment
            bunx convex deploy -y --typecheck disable
            
            if [ $? -ne 0 ]; then
              echo "ERROR: Convex deployment failed"
              exit 1
            fi
            
            echo "Convex deployment complete"
          else
            echo "Skipping Convex deployment for non-production environment: ${{ inputs.environment }}"
          fi

  deploy-cloudflare:
    runs-on: ubuntu-latest
    needs: [deploy-terraform, deploy-convex]
    environment:
      name: ${{ inputs.branch == 'main' && 'main' || inputs.branch == 'main-alt' && 'main-alt' || 'dev' }}
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      # Build frontend for Cloudflare Workers
      - name: Build Frontend
        env:
          VITE_CONVEX_URL: ${{ secrets.VITE_CONVEX_URL }}
          CONVEX_DEPLOYMENT: ${{ secrets.CONVEX_DEPLOYMENT_NAME }}
          VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
          CLERK_FRONTEND_API_URL: ${{ secrets.CLERK_FRONTEND_API_URL }}
          VITE_POSTHOG_API_KEY: ${{ secrets.VITE_POSTHOG_API_KEY }}
          VITE_POSTHOG_API_HOST: ${{ secrets.VITE_POSTHOG_API_HOST }}
          VITE_POSTHOG_PROJECT_ID: ${{ secrets.VITE_POSTHOG_PROJECT_ID }}
          VITE_POSTHOG_REGION: 'US Cloud'
          VITE_APP_NAME: ${{ vars.VITE_APP_NAME }}
          VITE_APP_DOMAIN: ${{ format('{0}.io', vars.VITE_APP_NAME) }}
          VITE_APP_SUBDOMAIN: ${{ inputs.environment == 'development' && 'dev' || (inputs.environment == 'ephemeral' && format('pr-{0}', inputs.pr_number) || '') }}
          VITE_APP_TWITTER_HANDLE: ${{ format('@{0}', vars.VITE_APP_NAME) }}
        run: |
          echo "Building frontend for Cloudflare Workers using Nx..."
          bun nx build @vibechecc/web

          # Verify the output was created
          if [ ! -f "apps/web/.output/server/index.mjs" ]; then
            echo "Error: apps/web/.output/server/index.mjs not found after build"
            echo "Checking what exists in apps/web/:"
            ls -la apps/web/ || true
            echo "Trying to rebuild without cache..."
            bun nx build @vibechecc/web --skip-nx-cache
            if [ ! -f "apps/web/.output/server/index.mjs" ]; then
              echo "Still failed after rebuild"
              exit 1
            fi
          fi

          echo "Build successful. Output structure:"
          ls -la apps/web/.output/

      - name: Add Ephemeral Environment to Wrangler Config
        if: inputs.environment == 'ephemeral'
        working-directory: apps/web
        run: |
          cat >> wrangler.toml << EOF

          [env.pr-${{ inputs.pr_number }}]
          name = "${{ vars.VITE_APP_NAME }}-pr-${{ inputs.pr_number }}-web"
          EOF

      - name: Add Production Environment to Wrangler Config
        if: inputs.environment == 'production' || inputs.environment == 'production-alt' || inputs.environment == 'development'
        working-directory: apps/web
        run: |
          cat >> wrangler.toml << EOF
          [env.${{ inputs.environment }}]
          name = "${{ vars.VITE_APP_NAME }}-${{ inputs.environment }}-web"
          EOF

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: |
            deploy --env ${{ inputs.environment == 'ephemeral' && format('pr-{0}', inputs.pr_number) || inputs.environment }} --config apps/web/wrangler.toml

      - name: Update Cloudflare Secrets
        working-directory: apps/web
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          ENV_NAME="${{ inputs.environment == 'ephemeral' && format('pr-{0}', inputs.pr_number) || inputs.environment }}"
          echo "Updating secrets for environment: $ENV_NAME"
          echo "${{ vars.VITE_APP_NAME }}" | bunx wrangler secret put VITE_APP_NAME --env $ENV_NAME
          echo "${{ format('{0}.io', vars.VITE_APP_NAME) }}" | bunx wrangler secret put VITE_APP_DOMAIN --env $ENV_NAME
          echo "${{ format('@{0}', vars.VITE_APP_NAME) }}" | bunx wrangler secret put VITE_APP_TWITTER_HANDLE --env $ENV_NAME
          echo "${{ inputs.environment == 'development' && 'dev' || (inputs.environment == 'ephemeral' && format('pr-{0}', inputs.pr_number) || '') }}" | bunx wrangler secret put VITE_APP_SUBDOMAIN --env $ENV_NAME
          echo "${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}" | bunx wrangler secret put VITE_CLERK_PUBLISHABLE_KEY --env $ENV_NAME
          echo "${{ secrets.VITE_CONVEX_URL }}" | bunx wrangler secret put VITE_CONVEX_URL --env $ENV_NAME
          echo "${{ secrets.CLERK_SECRET_KEY }}" | bunx wrangler secret put CLERK_SECRET_KEY --env $ENV_NAME
          echo "${{ secrets.VITE_POSTHOG_API_KEY }}" | bunx wrangler secret put VITE_POSTHOG_API_KEY --env $ENV_NAME
          echo "${{ secrets.VITE_POSTHOG_API_HOST }}" | bunx wrangler secret put VITE_POSTHOG_API_HOST --env $ENV_NAME
          echo "${{ secrets.VITE_POSTHOG_PROJECT_ID }}" | bunx wrangler secret put VITE_POSTHOG_PROJECT_ID --env $ENV_NAME
