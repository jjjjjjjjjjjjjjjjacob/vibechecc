name: Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Environment to deploy to (development, production, ephemeral)'
      branch:
        required: true
        type: string
        description: 'Branch being deployed'
      pr_number:
        required: false
        type: string
        description: 'PR number for ephemeral deployments'

jobs:
  deploy-terraform:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.branch == 'main' && 'main' || 'dev' }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('terraform/**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Determine workspace and environment variables
        id: env
        run: |
          if [ "${{ inputs.environment }}" = "ephemeral" ]; then
            echo "workspace=pr-${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.environment }}" = "production" ]; then
            echo "workspace=production" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.environment }}" = "development" ]; then
            echo "workspace=development" >> $GITHUB_OUTPUT
          fi

      - name: Generate backend configuration
        working-directory: terraform
        env:
          R2_BUCKET: ${{ vars.CLOUDFLARE_R2_BUCKET }}
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_zone: ${{ vars.CLOUDFLARE_ZONE }}
          TF_VAR_environment: ${{ inputs.environment }}
          TF_VAR_pr_number: ${{ inputs.pr_number }}
          R2_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        run: |
          chmod +x ./generate-backend-config.sh
          ./generate-backend-config.sh

      - name: Get A & AAAA record IDs from Cloudflare
        working-directory: terraform
        run: |

      - name: Initialize Terraform with backend
        working-directory: terraform
        run: |
          terraform init -backend-config=backend.tfvars

      - name: Create or select workspace
        working-directory: terraform
        run: |
          terraform workspace select ${{ steps.env.outputs.workspace }} || terraform workspace new ${{ steps.env.outputs.workspace }}
      - name: Get DNS record IDs and import if they exist
        id: dns_records
        working-directory: terraform
        env:
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_zone: ${{ vars.CLOUDFLARE_ZONE }}
          TF_VAR_environment: ${{ inputs.environment }}
        run: |
          # Get DNS records from Cloudflare API
          curl -s -X GET "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | jq '.' > dns_output.json

          # Get Workers scripts from Cloudflare API
          curl -s -X GET "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/workers/scripts" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" | jq '.' > workers_output.json

          # Extract A record ID for vibechecc.app
          A_RECORD_ID=$(jq -r '.result[] | select(.type == "A" and .name == "vibechecc.app") | .id' dns_output.json)

          # Extract AAAA record ID for vibechecc.app
          AAAA_RECORD_ID=$(jq -r '.result[] | select(.type == "AAAA" and .name == "vibechecc.app") | .id' dns_output.json)

          # Extract CNAME record ID for vibechecc.app
          CNAME_RECORD_ID=$(jq -r '.result[] | select(.type == "CNAME" and .name == "vibechecc.app") | .id' dns_output.json)

          # Extract Worker script name for vibechecc-{environment}-frontend
          WORKER_SCRIPT_NAME="vibechecc-${{ inputs.environment }}-frontend"
          WORKER_SCRIPT_EXISTS=$(jq -r --arg script_name "$WORKER_SCRIPT_NAME" '.result[] | select(.id == $script_name) | .id' workers_output.json)

          # Set outputs for potential use in other steps
          echo "a_record_id=$A_RECORD_ID" >> $GITHUB_OUTPUT
          echo "aaaa_record_id=$AAAA_RECORD_ID" >> $GITHUB_OUTPUT
          echo "cname_record_id=$CNAME_RECORD_ID" >> $GITHUB_OUTPUT
          echo "worker_script_name=$WORKER_SCRIPT_EXISTS" >> $GITHUB_OUTPUT

          # Import A record if it exists
          if [ "$A_RECORD_ID" != "null" ] && [ -n "$A_RECORD_ID" ]; then
            echo "Importing A record with ID: $A_RECORD_ID"
            terraform import module.vibechecc_worker.cloudflare_dns_record.frontend_a ${{ secrets.CLOUDFLARE_ZONE_ID }}/$A_RECORD_ID || true
          else
            echo "No A record found to import"
          fi

          # Import AAAA record if it exists
          if [ "$AAAA_RECORD_ID" != "null" ] && [ -n "$AAAA_RECORD_ID" ]; then
            echo "Importing AAAA record with ID: $AAAA_RECORD_ID"
            terraform import module.vibechecc_worker.cloudflare_dns_record.frontend_aaaa ${{ secrets.CLOUDFLARE_ZONE_ID }}/$AAAA_RECORD_ID || true
          else
            echo "No AAAA record found to import"
          fi

          # Import CNAME record if it exists

          if [ "$CNAME_RECORD_ID" != "null" ] && [ -n "$CNAME_RECORD_ID" ]; then
            echo "Importing CNAME record with ID: $CNAME_RECORD_ID"
            terraform import module.vibechecc_worker.cloudflare_dns_record.frontend_cname ${{ secrets.CLOUDFLARE_ZONE_ID }}/$CNAME_RECORD_ID || true
          else
            echo "No CNAME record found to import"
          fi

          # Import Worker script if it exists
          if [ "$WORKER_SCRIPT_EXISTS" != "null" ] && [ -n "$WORKER_SCRIPT_EXISTS" ]; then
            echo "Importing Worker script: $WORKER_SCRIPT_EXISTS"
            terraform import module.vibechecc_worker.cloudflare_workers_script.frontend ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}/$WORKER_SCRIPT_EXISTS || true
          else
            echo "No Worker script found to import"
          fi

      - name: Terraform Apply
        working-directory: terraform
        env:
          TF_VAR_cloudflare_account_id: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          TF_VAR_cloudflare_zone_id: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_VAR_cloudflare_zone: ${{ vars.CLOUDFLARE_ZONE }}
          TF_VAR_environment: ${{ inputs.environment }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_SECRET_ACCESS_KEY }}
        run: |
          terraform apply -auto-approve

  deploy-convex:
    runs-on: ubuntu-latest
    needs: deploy-terraform
    environment:
      name: ${{ inputs.branch == 'main' && 'main' || 'dev' }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Configure Convex
        working-directory: apps/backend
        env:
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
        run: bunx convex dev --configure=existing --project ${{ secrets.CONVEX_PROJECT_SLUG }} --dev-deployment cloud --once

      # Set Convex environment variables for backend (now in apps/backend)
      - name: Set Environment Variables
        working-directory: apps/backend
        env:
          CONVEX_DEPLOYMENT: ${{ secrets.CONVEX_DEPLOYMENT_NAME }}
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
        run: |
          bunx convex env --deployment-name ${{ secrets.CONVEX_DEPLOYMENT_NAME }} set CLERK_FRONTEND_API_URL ${{ secrets.CLERK_FRONTEND_API_URL }}
          bunx convex env --deployment-name ${{ secrets.CONVEX_DEPLOYMENT_NAME }} set CLERK_WEBHOOK_SIGNING_SECRET ${{ secrets.CLERK_WEBHOOK_SIGNING_SECRET }}

      # Build and deploy Convex backend
      - name: Build Convex Backend
        run: bun nx build @vibechecc/backend

      - name: Deploy Convex
        working-directory: apps/backend
        env:
          CONVEX_DEPLOYMENT: ${{ secrets.CONVEX_DEPLOYMENT_NAME }}
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}
        run: |
          if [ "${{ inputs.environment }}" = "production" ]; then
            bunx convex deploy -y
          else
            echo "Skipping Convex deployment for non-production environment"
          fi

  deploy-cloudflare:
    runs-on: ubuntu-latest
    needs: deploy-convex
    environment:
      name: ${{ inputs.branch == 'main' && 'main' || 'dev' }}
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      # Build frontend (now in apps/frontend/browser)
      - name: Build Frontend
        run: bun nx build @vibechecc/frontend-browser

      - name: Deploy to Cloudflare Workers
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          wranglerVersion: '4'
          command: 'deploy --env ${{ inputs.environment }} --config apps/frontend/browser/wrangler.toml'

      - name: Update Cloudflare Secrets
        working-directory: apps/frontend/browser
        run: |
          echo ${{ secrets.CLERK_SECRET_KEY }} | bunx wrangler secret put --env ${{ inputs.environment }} CLERK_SECRET_KEY
          echo ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }} | bunx wrangler secret put --env ${{ inputs.environment }} VITE_CLERK_PUBLISHABLE_KEY
          echo ${{ secrets.VITE_CONVEX_URL }} | bunx wrangler secret put --env ${{ inputs.environment }} VITE_CONVEX_URL
