name: Release

on:
  workflow_call:
    inputs:
      prerelease:
        required: true
        type: boolean
        description: 'Whether this is a prerelease (beta) version'
      branch:
        required: true
        type: string
        description: 'Branch being released'
    outputs:
      version:
        description: 'The new version number'
        value: ${{ jobs.release.outputs.version }}

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Nx Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure tags are available locally for detection
          git fetch --tags --force

          # Pre-stage the lock file to prevent Nx from trying to stage bun.lockb
          git add bun.lock

          # Check if any version tags exist
          if ! git tag -l "v*" | grep -q .; then
            echo "No version tags found, using --first-release"
            if [ "${{ inputs.prerelease }}" = "true" ]; then
              # Let conventional commits determine the bump, with preid for beta
              bunx nx release --preid=beta --first-release --yes || true
            else
              bunx nx release --first-release --yes || true
            fi
          else
            if [ "${{ inputs.prerelease }}" = "true" ]; then
              # Let conventional commits determine the bump, with preid for beta
              bunx nx release --preid=beta --yes || true
            else
              bunx nx release --yes || true
            fi
          fi

          # Stage any changes again in case Nx modified the lock file
          git add bun.lock || true

          # Stage all modified package.json files (they should exist)
          git add package.json packages/*/package.json apps/*/package.json || true

          # Stage CHANGELOG if it exists (may not exist on first release)
          if [ -f "CHANGELOG.md" ]; then
            git add CHANGELOG.md
          fi

          # Get the version from package.json after release
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Create commit and tag if there are changes (backup in case Nx didn't)
          if [ -n "$(git status --porcelain)" ]; then
            echo "Creating release commit and tag..."
            git commit -m "chore(release): v${VERSION} [skip ci]" || true
            git tag -a "v${VERSION}" -m "v${VERSION}" || true
          fi

      - name: Push changes
        run: git push origin ${{ inputs.branch }} --follow-tags

      - name: Generate Release Notes
        if: steps.release.outputs.version != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.release.outputs.version }}"
          TAG_NAME="v${VERSION}"
          
          # Get the previous tag for comparison
          PREV_TAG=$(git describe --tags --abbrev=0 ${TAG_NAME}^ 2>/dev/null || echo "")
          
          # Generate release notes using GitHub CLI
          if [ -z "$PREV_TAG" ]; then
            # First release - no previous tag
            gh release create "$TAG_NAME" \
              --generate-notes \
              --title "Release ${VERSION}" \
              --prerelease=${{ inputs.prerelease }} \
              --verify-tag || true
          else
            # Normal release with previous tag for comparison
            gh release create "$TAG_NAME" \
              --generate-notes \
              --notes-start-tag "$PREV_TAG" \
              --title "Release ${VERSION}" \
              --prerelease=${{ inputs.prerelease }} \
              --verify-tag || true
          fi
