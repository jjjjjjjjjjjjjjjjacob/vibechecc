name: Release

on:
  workflow_call:
    inputs:
      prerelease:
        required: true
        type: boolean
        description: 'Whether this is a prerelease (beta) version'
      branch:
        required: true
        type: string
        description: 'Branch being released'
    outputs:
      version:
        description: 'The new version number'
        value: ${{ jobs.release.outputs.version }}

jobs:
  release:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.branch == 'main' && 'main' || inputs.branch == 'dev' && 'dev' || '' }}
    outputs:
      version: ${{ steps.release.outputs.version }}
    permissions:
      contents: write
      pull-requests: write
      actions: read
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.RELEASE_APP_ID }}
          private_key: ${{ secrets.RELEASE_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ steps.generate_token.outputs.token }}

      - name: Configure Git
        run: |
          git config user.name "vibechecc-release-bot[bot]"
          git config user.email "178154844+vibechecc-release-bot[bot]@users.noreply.github.com"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run Nx Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          # Ensure tags are available locally for detection
          git fetch --tags --force --prune

          # Check if any version tags exist
          if ! git tag -l "v*" | grep -q .; then
            echo "No version tags found, using --first-release"
            if [ "${{ inputs.prerelease }}" = "true" ]; then
              # Dev: create first prerelease from manifest version
              bunx nx release --specifier prerelease --preid=beta --first-release --skip-publish
            else
              # Main: create first stable release from manifest version
              bunx nx release --specifier release --first-release --skip-publish
            fi
          else
            if [ "${{ inputs.prerelease }}" = "true" ]; then
              # Dev: always bump prerelease (e.g., 0.1.0-beta.8 -> 0.1.0-beta.9)
              bunx nx release --specifier prerelease --preid=beta --skip-publish
            else
              # Main: finalize prerelease to stable (e.g., 0.1.0-beta.8 -> 0.1.0)
              bunx nx release --specifier release --skip-publish
            fi
          fi

          # Stage any changes again in case Nx modified the lock file (backup path)
          git add bun.lock || true

          # Stage all modified package.json files (they should exist)
          git add package.json packages/*/package.json apps/*/package.json || true

          # Stage CHANGELOG if it exists (may not exist on first release)
          if [ -f "CHANGELOG.md" ]; then
            git add CHANGELOG.md
          fi

          # Get the version from package.json after release
          VERSION=$(node --input-type=module -e "import {readFileSync} from 'node:fs'; console.log(JSON.parse(readFileSync('package.json','utf8')).version)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Create commit and tag only if Nx didn't (avoid duplicates)
          if git tag -l | grep -q "^v${VERSION}$"; then
            echo "Tag v${VERSION} already exists; skipping backup commit/tag."
          else
            if [ -n "$(git status --porcelain)" ]; then
              echo "Creating release commit and tag..."
              git commit -m "chore(release): v${VERSION} [skip ci]"
              git tag -a "v${VERSION}" -m "v${VERSION}"
            fi
          fi

      - name: Push changes
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Use the GitHub App token to bypass repository rules
          git remote set-url origin https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/${{ github.repository }}.git
          git push origin ${{ inputs.branch }} --follow-tags

      - name: Generate Release Notes
        if: ${{ steps.release.outputs.version != '' }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          # Ensure we have the latest tags available locally
          git fetch --tags --force --prune

          VERSION="${{ steps.release.outputs.version }}"
          TAG_NAME="v${VERSION}"

          echo "üè∑Ô∏è Creating GitHub release for ${TAG_NAME}..."

          # Verify tag exists locally and remotely
          if ! git tag -l | grep -q "^${TAG_NAME}$"; then
            echo "‚ùå Error: Tag ${TAG_NAME} not found locally"
            exit 1
          fi

          # Check if release already exists
          if gh release view "$TAG_NAME" > /dev/null 2>&1; then
            echo "‚ö†Ô∏è Release ${TAG_NAME} already exists, skipping creation"
            exit 0
          fi

          # Get the previous tag for comparison
          PREV_TAG=$(git describe --tags --abbrev=0 ${TAG_NAME}^ 2>/dev/null || echo "")
          echo "üìù Previous tag: ${PREV_TAG:-'none (first release)'}"

          # Generate release title
          RELEASE_TITLE="Release ${VERSION}"

          # Create release with proper error handling
          set -e
          if [ -z "$PREV_TAG" ]; then
            echo "üÜï Creating first release..."
            if [ "${{ inputs.prerelease }}" = "true" ]; then
              gh release create "$TAG_NAME" \
                --generate-notes \
                --title "$RELEASE_TITLE" \
                --prerelease \
                --verify-tag
            else
              gh release create "$TAG_NAME" \
                --generate-notes \
                --title "$RELEASE_TITLE" \
                --verify-tag
            fi
          else
            echo "üîÑ Creating release with comparison to ${PREV_TAG}..."
            if [ "${{ inputs.prerelease }}" = "true" ]; then
              gh release create "$TAG_NAME" \
                --generate-notes \
                --notes-start-tag "$PREV_TAG" \
                --title "$RELEASE_TITLE" \
                --prerelease \
                --verify-tag
            else
              gh release create "$TAG_NAME" \
                --generate-notes \
                --notes-start-tag "$PREV_TAG" \
                --title "$RELEASE_TITLE" \
                --verify-tag
            fi
          fi

          echo "‚úÖ Successfully created GitHub release ${TAG_NAME}"

      - name: Deployment Status Check
        if: ${{ steps.release.outputs.version != '' && !inputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          VERSION="${{ steps.release.outputs.version }}"
          TAG_NAME="v${VERSION}"

          echo "üöÄ Monitoring deployment status for ${TAG_NAME}..."

          # Wait a moment for deployment to potentially trigger
          sleep 30

          # Check if there are any deployment statuses
          DEPLOYMENT_COUNT=$(gh api repos/${{ github.repository }}/deployments?per_page=5 --jq 'length')

          if [ "$DEPLOYMENT_COUNT" -gt 0 ]; then
            echo "üìä Found $DEPLOYMENT_COUNT deployment(s), checking latest status..."
            LATEST_STATUS=$(gh api repos/${{ github.repository }}/deployments?per_page=1 --jq '.[0].environment // "unknown"')
            echo "üîç Latest deployment environment: $LATEST_STATUS"
          else
            echo "‚ÑπÔ∏è No deployments found - this may be expected for library releases"
          fi

          echo "üìù Release monitoring completed for ${TAG_NAME}"

      - name: Release Notification
        if: ${{ failure() && steps.release.outputs.version != '' }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          VERSION="${{ steps.release.outputs.version }}"
          TAG_NAME="v${VERSION}"

          echo "‚ùå Release workflow failed for ${TAG_NAME}"
          echo "üîç Creating issue for failed release..."

          # Create an issue for the failed release (optional - only if this is desired)
          # gh issue create \
          #   --title "Release ${TAG_NAME} workflow failed" \
          #   --body "The release workflow failed for version ${TAG_NAME}. Please check the workflow logs and resolve any issues." \
          #   --label "bug,release" || echo "‚ö†Ô∏è Could not create issue, but release failure logged"
