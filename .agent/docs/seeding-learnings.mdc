# Seeding & Database Management Learnings

## Key Learnings from Enhanced Seed Implementation

### ✅ What Works Well

1. **Convex-Native Approach**: Keep all seeding logic within Convex functions (`convex/seed.ts`)
   - Actions for public API calls (`seed:seed`, `seed:seedEnhanced`, `seed:clear`)  
   - Internal mutations for data manipulation (`createForSeed`, `clearAll`)
   - Proper separation of concerns within the Convex framework

2. **Monorepo-Aware Commands**: Use direct Convex commands in package.json scripts
   ```json
   "seed": "bunx convex run seed:seed",
   "seed:enhanced": "bunx convex run seed:seedEnhanced", 
   "seed:clear": "bunx convex run seed:clear"
   ```

3. **Schema-Compliant Data Creation**: Create dedicated `createForSeed` functions
   - Accept all fields needed for seeding (bio, interests, created_at)
   - Bypass authentication requirements 
   - Use `internalMutation` for internal-only access
   - Follow existing patterns in codebase (e.g., `vibes.createForSeed`)

### ❌ Anti-Patterns to Avoid

1. **Standalone Scripts Directory**: Never create `/scripts/` for Convex operations
   - Scripts can't access monorepo structure properly
   - Path resolution issues (`cd apps/backend` workarounds)
   - Breaks when run from different directories
   - Creates maintenance burden

2. **Mixed Action/Mutation Database Access**: Actions cannot directly access `ctx.db`
   - Actions use `ctx.runMutation()` and `ctx.runQuery()`  
   - Mutations use `ctx.db.query()`, `ctx.db.insert()`, etc.
   - Don't mix these patterns in the same function

3. **Hardcoded File Paths**: Avoid assuming execution directory
   - Use relative paths that work from project root
   - Test commands from multiple directories
   - Don't use `cd` workarounds in scripts

### 🔧 Technical Implementation Notes

1. **User Creation for Seeding**:
   ```typescript
   // Add createForSeed to users.ts
   export const createForSeed = internalMutation({
     args: {
       externalId: v.string(),
       username: v.optional(v.string()),
       image_url: v.optional(v.string()),
       bio: v.optional(v.string()),
       interests: v.optional(v.array(v.string())),
       created_at: v.optional(v.number()),
     },
     handler: async (ctx, args) => {
       // Implementation with onboardingCompleted: true
     }
   });
   ```

2. **Clear Database Pattern**:
   ```typescript
   // Action calls internal mutation
   export const clear = action({
     handler: async (ctx) => {
       return await ctx.runMutation(internal.seed.clearAll);
     }
   });
   
   // Internal mutation does the work
   export const clearAll = internalMutation({
     handler: async (ctx) => {
       // Direct database operations
     }
   });
   ```

3. **Vibe Creation**: Use existing `createForSeed` but don't pass `createdAt`
   - Function generates timestamps automatically
   - Check existing function signatures before calling

### 🎯 Best Practices for Future Development

1. **Always Use Convex Functions**: Keep database operations in Convex files
2. **Test from Project Root**: Run all commands from monorepo root  
3. **Follow Existing Patterns**: Check how similar functions are implemented
4. **Use Internal Mutations**: For seeding functions that bypass auth
5. **Document New Commands**: Update CLAUDE.md with new scripts
6. **Remove Unused Code**: Clean up temporary files and directories

### 🚨 When to Use This Reference

- **Adding new seed data**: Follow the `createForSeed` pattern
- **Database operations**: Keep logic in Convex functions, not scripts
- **New package.json scripts**: Use direct Convex commands 
- **Debugging seed issues**: Check Action vs Mutation usage
- **Monorepo changes**: Avoid scripts directory anti-patterns

### 📊 Results Achieved

- ✅ 30 diverse users with realistic profiles
- ✅ 20 comprehensive vibes covering everyday situations  
- ✅ Extensive rating system with authentic reviews
- ✅ Dynamic emoji reaction system
- ✅ Simulated active community engagement
- ✅ Clean, maintainable Convex-native architecture