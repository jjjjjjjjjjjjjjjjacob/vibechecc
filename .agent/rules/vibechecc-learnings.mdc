---
description: 
globs: 
alwaysApply: false
---
# viberater Workspace Learnings

## Infrastructure & DevOps

### Terraform + Convex + AWS Amplify Architecture
- **Context**: Setting up infrastructure for a React app with Convex backend and AWS Amplify frontend hosting
- **Key Insight**: Convex doesn't have a native Terraform provider, so infrastructure automation needs to use Convex CLI in CI/CD pipelines
- **Best Practice**: Use GitHub OIDC for AWS authentication to avoid long-lived credentials
- **Helpful for**: Infrastructure provisioning, multi-environment setups, PR-based ephemeral environments

### Environment Strategy
- **Context**: Managing production, development, and ephemeral PR environments
- **Key Insight**: Ephemeral environments for PRs provide excellent testing isolation but require careful cost management and cleanup automation
- **Best Practice**: Use consistent naming conventions and resource tagging for environment identification and cost tracking
- **Helpful for**: Environment management, cost optimization, testing workflows

### Convex Integration Patterns
- **Context**: Integrating Convex with traditional infrastructure as code approaches
- **Key Insight**: Convex deployments are managed through their CLI, requiring script-based automation rather than declarative infrastructure
- **Best Practice**: Use environment variables and secrets management for Convex configuration across environments
- **Helpful for**: Backend deployment automation, secret management, environment configuration

## Development Workflow

### Monorepo with Bun + Nx
- **Context**: Project uses bun for runtime and nx for workspace management
- **Key Insight**: Always use `bun` commands instead of `npm` or `yarn` for consistency
- **Best Practice**: Reference package.json scripts for available commands
- **Helpful for**: Command execution, dependency management, build processes

### Testing Strategy
- **Context**: Vitest setup with comprehensive test coverage requirements
- **Key Insight**: No skipped tests allowed - skipped tests are considered failing tests
- **Best Practice**: All tests must pass before deployment, no exceptions for skipped tests
- **Helpful for**: Quality assurance, CI/CD pipeline design, test automation

## Security Considerations

### Secret Management
- **Context**: Managing secrets across multiple environments and services
- **Key Insight**: Use AWS Secrets Manager for centralized secret storage with IAM-based access control
- **Best Practice**: Implement secret rotation and least-privilege access principles
- **Helpful for**: Security implementation, compliance, secret rotation strategies

### GitHub Actions Security
- **Context**: Setting up secure CI/CD pipelines with proper authentication
- **Key Insight**: OIDC-based authentication eliminates the need for long-lived AWS credentials
- **Best Practice**: Use environment-specific IAM roles with minimal required permissions
- **Helpful for**: CI/CD security, AWS integration, credential management

## Cost Optimization

### Resource Management
- **Context**: Managing costs across multiple environments including ephemeral ones
- **Key Insight**: Ephemeral environments can quickly accumulate costs if not properly managed
- **Best Practice**: Implement automatic cleanup, resource limits, and cost monitoring with alerts
- **Helpful for**: Cost control, resource optimization, budget management

### Environment Sizing
- **Context**: Right-sizing resources for different environment types
- **Key Insight**: Development environments can use smaller, cost-optimized resources
- **Best Practice**: Use different resource configurations per environment type
- **Helpful for**: Cost optimization, resource planning, environment configuration
