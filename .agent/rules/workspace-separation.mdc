---
description: Maintain proper separation of concerns between workspaces
globs: packages/**/*,apps/**/*
alwaysApply: true
---

# Workspace Separation of Concerns

## Core Principle
Keep code where it belongs. Only extract to shared packages when multiple workspaces actually need it.

## Guidelines

### What belongs in shared packages (e.g., @viberater/utils):
- Utilities used by 2+ workspaces (frontend, backend, etc.)
- Type definitions shared across workspaces (@viberater/types)
- Constants and configurations used by multiple apps
- Generic utilities with no workspace-specific dependencies

### What stays in individual workspaces:
- Business logic specific to that workspace
- UI components only used in one app
- Utilities that depend on workspace-specific libraries
- Configuration specific to one app
- Features and their related utilities

## Examples

### ❌ Bad: Over-extraction
```typescript
// packages/utils/src/posthog.ts
import { posthog } from 'posthog-js'; // Frontend-specific library!
export function trackEvent() { ... }
```

### ✅ Good: Keep in workspace
```typescript
// apps/frontend/browser/src/lib/posthog.ts
import { posthog } from 'posthog-js';
export function trackEvent() { ... }
```

### ✅ Good: Truly shared utility
```typescript
// packages/utils/src/format/date.ts
export function formatDate(date: Date): string {
  // Pure function, no dependencies, used by frontend and backend
  return date.toLocaleDateString();
}
```

## Decision Framework
Before moving code to a shared package, ask:
1. Is this currently used by multiple workspaces? (Not "might be")
2. Does it have workspace-specific dependencies?
3. Is it generic enough to be reusable?
4. Would extracting it create unnecessary complexity?

## Refactoring Rule
When in doubt, keep it local. Extract to shared packages only when you have a concrete need, not anticipated future use.