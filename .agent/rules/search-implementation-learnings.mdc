# Search Implementation Learnings

## Testing Challenges & Solutions

### 1. Vitest Configuration Issues
**Problem**: Tests failing with TSConfig parsing errors for non-existent `/apps/backend/` directory.
**Solution**: The monorepo structure has changed and tests need to be run from appropriate directories with correct configurations.
**When Helpful**: When setting up new test files or encountering configuration errors.

### 2. Mock Function Pattern
**Problem**: `vi.mock()` calls need specific patterns to work correctly.
**Solution**: Define mock functions as constants before vi.mock() calls:
```typescript
const mockUseSearchSuggestions = vi.fn();
vi.mock('../hooks/use-search', () => ({
  useSearchSuggestions: mockUseSearchSuggestions,
}));
```
**When Helpful**: When creating new component tests that need to mock hooks or modules.

## Search Architecture Insights

### 1. Real-time Integration Complete
Agent 1 has already completed the frontend-backend integration:
- Debouncing implemented with `use-debounced-value` hook
- All mock data replaced with Convex queries
- Search tracking integrated
- Error handling and loading states added
**When Helpful**: When working on search features, check what's already implemented.

### 2. Advanced Search Features Complete
Agent 2 has implemented comprehensive search enhancements:
- Fuzzy matching with Levenshtein distance
- Advanced relevance scoring
- Search operators (quotes, minus, tags, etc.)
- Enhanced filter components with URL sync
**When Helpful**: When extending search functionality or debugging search behavior.

### 3. Metrics Architecture
Created comprehensive analytics system with:
- `searchMetrics` table for tracking all search events
- Separate tracking for searches, clicks, and errors
- Performance monitoring with response times
- Aggregated metrics queries for insights
**When Helpful**: When adding new analytics or debugging performance issues.

## Code Patterns to Follow

### 1. Component Updates
Always check if components have been modified by other agents:
- `search-command.tsx` now uses `useTrendingSearches` hook
- `search-results-grid.tsx` includes error handling
- `search-filters.tsx` has enhanced mobile-responsive design

### 2. Error Handling Pattern
```typescript
if (error) {
  return <SearchError error={error} onRetry={onRetry} />;
}
```

### 3. Loading State Pattern
```typescript
if (loading) {
  return <SearchLoading itemCount={9} type="grid" />;
}
```

## Performance Considerations

### 1. Query Limits
Backend search functions use `.take()` limits for performance:
- Vibes: 100 items
- Users: 200 items
- Prevents full table scans

### 2. Async Metrics
Search metrics are recorded asynchronously using `scheduler.runAfter(0, ...)` to not block search responses.

### 3. Debouncing
Search input uses 300ms debouncing, suggestions use 150ms for faster feedback.

## Testing Best Practices

### 1. Component Tests
- Always include `/// <reference lib="dom" />` at the top
- Use `afterEach(cleanup)` for proper cleanup
- Mock external dependencies (Clerk, router, API calls)

### 2. Backend Tests
- Use `convex-test` for testing Convex functions
- Create test data within each test for isolation
- Verify performance with timing assertions

### 3. Integration Points
When one agent's work depends on another:
- Check the implementation plan for completion status
- Read modified files to understand changes
- Test integration points between features

## Common Pitfalls to Avoid

1. **Don't assume mock data** - Most mock data has been replaced with real Convex queries
2. **Check for existing implementations** - Many features may already be implemented by other agents
3. **Respect established patterns** - Follow existing code patterns for consistency
4. **Test configuration issues** - Be aware of the monorepo structure when running tests

## Useful Commands

```bash
# Run tests from web app directory
cd apps/web && bun vitest run

# Run specific test file
bun nx test @vibechecc/web -- path/to/test.tsx

# Check test coverage
bun nx test @vibechecc/web -- --coverage

# Run quality checks
bun run quality
```