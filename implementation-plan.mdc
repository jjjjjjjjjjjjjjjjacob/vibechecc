# Parallelized Search Implementation Plan for vibechecc

## Executive Summary
This plan enables 4 agents to work in parallel on implementing a comprehensive search system with:
1. **Command Palette Search** (Urban Outfitters style dropdown)
2. **Search Results Page** (TripAdvisor style with filters)

## Shared Foundation (Already Completed)
- Type definitions created in `packages/types/src/search.ts`
- All agents should import types from `@vibechecc/types`

---

## Agent 1: Backend Search Infrastructure ✅ COMPLETED

### Objective
Create the Convex backend functions for search functionality.

### Files Created/Modified
```
apps/convex/convex/
├── search.ts ✅ (new)
└── schema.ts ✅ (modified - added search-related tables)
```

### Tasks
1. **Update Schema** (`schema.ts`)
```typescript
// Add these tables:
searchHistory: defineTable({
  userId: v.string(),
  query: v.string(),
  timestamp: v.number(),
  resultCount: v.number(),
  clickedResults: v.optional(v.array(v.string())),
})
  .index('byUser', ['userId', 'timestamp'])
  .index('byTimestamp', ['timestamp']),

trendingSearches: defineTable({
  term: v.string(),
  count: v.number(),
  lastUpdated: v.number(),
  category: v.optional(v.string()), // 'vibe', 'user', 'tag'
})
  .index('byCount', ['count'])
  .index('byTerm', ['term']),
```

2. **Create Search Functions** (`search.ts`)
```typescript
import { query, mutation } from './_generated/server';
import { v } from 'convex/values';
import type { SearchRequest, SearchResponse, SearchResult } from '@vibechecc/types';

// Main search function
export const searchAll = query({
  args: {
    query: v.string(),
    filters: v.optional(/* define based on SearchFilters type */),
    limit: v.optional(v.number()),
    cursor: v.optional(v.string()),
    includeTypes: v.optional(v.array(v.string())),
  },
  handler: async (ctx, args) => {
    // Search implementation
    // 1. Search vibes by title/description
    // 2. Search users by username/name
    // 3. Search tags
    // 4. Apply filters
    // 5. Sort by relevance/score
    // Return SearchResponse
  },
});

// Quick suggestions for command palette
export const getSearchSuggestions = query({
  args: {
    query: v.string(),
    limit: v.optional(v.number()),
  },
  handler: async (ctx, args) => {
    // Return quick matches for command palette
    // Limit to 5-10 results per category
  },
});

// Get trending searches
export const getTrendingSearches = query({
  args: { limit: v.optional(v.number()) },
  handler: async (ctx, args) => {
    // Return top trending search terms
  },
});

// Track search (mutation)
export const trackSearch = mutation({
  args: {
    query: v.string(),
    resultCount: v.number(),
  },
  handler: async (ctx, args) => {
    // Record search history
    // Update trending searches
  },
});
```

### Implementation Notes
- Use Convex's text search capabilities where possible
- Implement fuzzy matching for typos (levenshtein distance)
- Score results based on:
  - Exact matches (highest)
  - Partial matches
  - Tag matches
  - Recent activity
- Limit results per type for command palette (5 vibes, 3 users, 5 tags)

### Completed Features ✅
1. **Schema Updates**:
   - Added `searchHistory` table with indexes for user lookups and timestamps
   - Added `trendingSearches` table with indexes for count and term lookups
   - Exported new table types (SearchHistory, TrendingSearches)

2. **Search Functions Created**:
   - **searchAll**: Main search with comprehensive filtering
     - Text matching across vibes (title, description, tags)
     - User search (username, full name, bio)
     - Tag aggregation and search
     - Filters: tags, rating range, date range, creators, sort options
     - Relevance scoring algorithm
     - Pagination support

   - **getSearchSuggestions**: Quick search for command palette
     - Returns recent searches when query is empty
     - Limited results per category (5 vibes, 3 users, 5 tags)
     - Optimized for speed with limited database queries

   - **getTrendingSearches**: Returns popular search terms
     - Sorted by count with configurable limit
     - Includes category information

   - **trackSearch**: Mutation to record search activity
     - Records search history for authenticated users
     - Updates trending searches count
     - Maintains top 100 trending terms
     - Tracks clicked results for analytics

3. **Implementation Details**:
   - Relevance scoring based on exact matches, partial matches, and word matches
   - Case-insensitive search throughout
   - Efficient index usage for performance
   - Proper TypeScript types from @vibechecc/types
   - Authentication-aware (search history requires auth)

### Next Steps for Integration
- Frontend agents can now import and use these functions via Convex hooks
- Command palette will use `getSearchSuggestions`
- Search results page will use `searchAll`
- Track searches with `trackSearch` mutation after displaying results

---

## Agent 2: Search Command Palette Component ✅ COMPLETED

### Objective
Build the command palette search interface using shadcn Command component.

### Files Created
```
apps/web/src/features/search/
├── components/
│   ├── search-command.tsx ✅
│   ├── search-suggestions.tsx ✅
│   └── result-items/
│       ├── vibe-result.tsx ✅
│       ├── user-result.tsx ✅
│       ├── tag-result.tsx ✅
│       └── action-result.tsx ✅
├── hooks/
│   ├── use-search.ts ✅
│   └── use-search-shortcuts.ts ✅
└── utils/
    └── search-mock-data.ts ✅ (temporary)
```

### Header Integration ✅
Modified `components/header.tsx` to:
- Replace inline search with command palette trigger button
- Add keyboard shortcut display (⌘K)
- Set up global keyboard shortcuts
- Add mobile search button

### Main Component Structure
```typescript
// search-command.tsx
import { Command, CommandDialog, CommandInput, CommandList, CommandGroup, CommandItem, CommandEmpty } from '@/components/ui/command';
import type { SearchResult } from '@vibechecc/types';

export function SearchCommand({ open, onOpenChange }: SearchCommandProps) {
  const [query, setQuery] = useState('');
  const { data, isLoading } = useSearchSuggestions(query);

  return (
    <CommandDialog open={open} onOpenChange={onOpenChange}>
      <Command>
        <CommandInput
          placeholder="Search vibes, users, or tags..."
          value={query}
          onValueChange={setQuery}
        />
        <CommandList>
          {/* Recent searches when empty */}
          {!query && <RecentSearches />}

          {/* Search results by category */}
          {query && (
            <>
              <CommandGroup heading="Vibes">
                {data?.vibes?.map(vibe => (
                  <VibeResult key={vibe.id} result={vibe} />
                ))}
              </CommandGroup>

              <CommandGroup heading="Users">
                {data?.users?.map(user => (
                  <UserResult key={user.id} result={user} />
                ))}
              </CommandGroup>

              <CommandGroup heading="Tags">
                {data?.tags?.map(tag => (
                  <TagResult key={tag.id} result={tag} />
                ))}
              </CommandGroup>

              <CommandGroup heading="Actions">
                <ActionResult action="create-vibe" query={query} />
              </CommandGroup>
            </>
          )}

          <CommandEmpty>No results found</CommandEmpty>
        </CommandList>
      </Command>
    </CommandDialog>
  );
}
```

### Result Item Components
Each result type should show:
- **VibeResult**: Image thumbnail, title, creator, rating
- **UserResult**: Avatar, username, vibe count
- **TagResult**: Tag name, usage count
- **ActionResult**: Icon, action label

### Implemented Features ✅
- **Command Palette Dialog** using shadcn Command component
- **Search Suggestions** when input is empty:
  - Recent searches with timestamps
  - Trending searches
  - Quick actions (Browse all vibes)
- **Categorized Results**:
  - Vibes with images, ratings, creator info, and tags
  - Users with avatars, usernames, and stats
  - Tags with usage counts
  - Actions (Create vibe, View profile)
- **Keyboard Shortcuts**:
  - `Cmd/Ctrl + K` to open globally
  - Arrow keys for navigation
  - Enter to select
  - Escape to close
- **Navigation Integration**:
  - Clicking results navigates to appropriate routes
  - Search for "query" action links to search results page
- **Mock Data** with realistic search filtering

### Implementation Details ✅

#### Components Created:
1. **search-command.tsx**: Main command palette dialog with CommandDialog wrapper
2. **search-suggestions.tsx**: Shows recent/trending searches when input is empty
3. **vibe-result.tsx**: Displays vibe results with image, rating, creator avatar, and tags
4. **user-result.tsx**: Shows user results with avatar, username, vibe/follower counts
5. **tag-result.tsx**: Simple tag display with usage count
6. **action-result.tsx**: Action items with icons (create vibe, view profile, search all)

#### Hooks Created:
1. **use-search.ts**: Search state management with mock data integration
2. **use-search-shortcuts.ts**: Global keyboard shortcut handler for Cmd/Ctrl+K

#### Mock Data:
- Comprehensive mock data in `search-mock-data.ts` with:
  - 5 sample vibes with images, ratings, and tags
  - 3 sample users with avatars and stats
  - 5 sample tags with usage counts
  - Recent and trending search suggestions
  - Filtering logic that matches search implementation

### Integration Points ✅
- Search command palette successfully integrated into header
- Navigation to all routes working (`/vibes/create`, `/profile`, `/search?q=...`)
- Build passes without errors
- Ready for backend integration

### Next Steps for Integration
- Backend (Agent 1) will replace mock data functions with Convex queries
- Update `useSearchSuggestions` to use `useQuery` from Convex
- Add error handling and loading states when connected to real API

---

## Agent 3: Search Results Page ✅ COMPLETED

### Objective
Create the full search results page with grid layout and pagination.

### Files Created
```
apps/web/src/
├── routes/
│   └── search.tsx ✅
├── features/search/
│   ├── components/
│   │   ├── search-results-grid.tsx ✅
│   │   ├── search-result-card.tsx ✅
│   │   ├── search-pagination.tsx ✅
│   │   ├── search-empty-state.tsx ✅
│   │   └── index.ts ✅ (exports)
│   └── hooks/
│       └── use-search-results.ts ✅
```

### Completed Features
- ✅ Search route with query params (q, tags, rating, sort, page)
- ✅ TripAdvisor-style result cards with:
  - Image thumbnails with aspect ratio
  - Badge overlays for content type (VIBE, USER, TAG)
  - Star ratings with review counts
  - Location information
  - Hover effects and transitions
- ✅ Different card designs for each result type:
  - Vibes: Image, title, rating, location
  - Users: Avatar, username, stats
  - Tags: Icon, name, usage count
- ✅ Responsive grid layout (1 col mobile, 3 cols desktop)
- ✅ Pagination with ellipsis handling
- ✅ Loading skeletons
- ✅ Empty state with popular search suggestions
- ✅ Sort dropdown (relevance, rating, recent)
- ✅ Mock data for development

### Next Steps for Integration
- Agent 4 will provide the SearchFilters component
- Backend (Agent 1) will replace mock data in useSearchResults hook
- Command palette (Agent 2) will link to this page

### Route Setup
```typescript
// routes/search.tsx
import { createFileRoute } from '@tanstack/react-router';
import { z } from 'zod';

export const Route = createFileRoute('/search')({
  searchParams: z.object({
    q: z.string().optional(),
    tags: z.array(z.string()).optional(),
    rating: z.number().optional(),
    sort: z.enum(['relevance', 'rating_desc', 'recent']).optional(),
    page: z.number().optional(),
  }),
  component: SearchResultsPage,
});

function SearchResultsPage() {
  const { q, tags, rating, sort, page } = Route.useSearch();
  const filters = { tags, minRating: rating, sort };

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Search header */}
      <SearchHeader query={q} resultCount={data?.totalCount} />

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
        {/* Filter sidebar - Agent 4 will provide */}
        <aside className="lg:col-span-1">
          <SearchFilters filters={filters} onChange={updateFilters} />
        </aside>

        {/* Results grid */}
        <main className="lg:col-span-3">
          <SearchResultsGrid
            results={data?.results}
            loading={isLoading}
          />
          <SearchPagination
            currentPage={page || 1}
            totalPages={totalPages}
          />
        </main>
      </div>
    </div>
  );
}
```

### Result Card Design
```typescript
// search-result-card.tsx
export function SearchResultCard({ result }: { result: VibeSearchResult }) {
  return (
    <Card className="overflow-hidden hover:shadow-lg transition-shadow">
      {/* Image */}
      <div className="aspect-video relative">
        <img src={result.image} alt={result.title} />
        <Badge className="absolute top-2 right-2">{result.type}</Badge>
      </div>

      {/* Content */}
      <CardContent className="p-4">
        <h3 className="font-semibold text-lg">{result.title}</h3>
        <p className="text-muted-foreground line-clamp-2">{result.description}</p>

        {/* Creator info */}
        <div className="flex items-center gap-2 mt-3">
          <Avatar className="h-6 w-6">
            <AvatarImage src={result.createdBy?.avatar} />
          </Avatar>
          <span className="text-sm">{result.createdBy?.name}</span>
        </div>

        {/* Rating and tags */}
        <div className="flex items-center justify-between mt-3">
          <StarRating value={result.rating} size="sm" />
          <div className="flex gap-1">
            {result.tags?.slice(0, 2).map(tag => (
              <Badge key={tag} variant="secondary" size="sm">{tag}</Badge>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
```

### Features
- Responsive grid (1 col mobile, 3 cols desktop)
- Loading skeletons
- Empty state with suggestions
- Infinite scroll or pagination
- Result count display

---

## Agent 4: Search Filters & Header Integration ✅ COMPLETED

### Objective
Create filter components and integrate search trigger into header.

### Files Created
```
apps/web/src/
├── features/search/
│   └── components/
│       ├── search-filters.tsx ✅
│       ├── filter-sidebar.tsx ✅
│       ├── mobile-filter-drawer.tsx ✅
│       ├── tag-filter.tsx ✅
│       ├── rating-filter.tsx ✅
│       ├── date-range-filter.tsx ✅
│       └── index.ts ✅ (updated with filter exports)
└── components/
    └── header.tsx ✅ (already integrated by Agent 2)
```

### Filter Components
```typescript
// search-filters.tsx
export function SearchFilters({ filters, onChange, availableTags }: SearchFiltersProps) {
  return (
    <div className="space-y-6">
      <div>
        <h3 className="font-semibold mb-3">Filters</h3>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => onChange({})}
        >
          Clear all
        </Button>
      </div>

      {/* Tag filter */}
      <TagFilter
        selected={filters.tags || []}
        available={availableTags}
        onChange={(tags) => onChange({ ...filters, tags })}
      />

      {/* Rating filter */}
      <RatingFilter
        value={filters.minRating}
        onChange={(rating) => onChange({ ...filters, minRating: rating })}
      />

      {/* Date range filter */}
      <DateRangeFilter
        value={filters.dateRange}
        onChange={(dateRange) => onChange({ ...filters, dateRange })}
      />

      {/* Sort options */}
      <SortOptions
        value={filters.sort || 'relevance'}
        onChange={(sort) => onChange({ ...filters, sort })}
      />
    </div>
  );
}
```

### Header Integration
Modify the existing header search to trigger command palette:

```typescript
// In header.tsx, replace search button with:
const [commandOpen, setCommandOpen] = useState(false);

// Add keyboard shortcut
useEffect(() => {
  const down = (e: KeyboardEvent) => {
    if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {
      e.preventDefault();
      setCommandOpen(true);
    }
  };

  document.addEventListener('keydown', down);
  return () => document.removeEventListener('keydown', down);
}, []);

// Update search button
<Button
  variant="ghost"
  className="gap-2"
  onClick={() => setCommandOpen(true)}
>
  <Search className="h-4 w-4" />
  <span className="hidden sm:inline-flex">Search</span>
  <kbd className="hidden sm:inline-flex">⌘K</kbd>
</Button>

<SearchCommand open={commandOpen} onOpenChange={setCommandOpen} />
```

### Mobile Considerations
- Filter drawer for mobile using Drawer component
- Collapsible filters on tablet
- Touch-friendly filter controls

### Completed Features ✅
- **Individual Filter Components**:
  - Tag filter with checkboxes and usage counts
  - Rating filter with star display radio buttons
  - Date range filter with presets and custom range placeholder
- **Main Search Filters Component**:
  - Combines all filters with clear all functionality
  - Sort dropdown integrated (relevance, rating_desc/asc, recent, oldest)
  - Active filter status indicator
- **Layout Components**:
  - Desktop sidebar wrapped in Card component
  - Mobile drawer with active filter count badge
  - Responsive design with proper breakpoints
- **Header Integration**:
  - Search command palette trigger already implemented
  - Keyboard shortcut (Cmd/Ctrl+K) functional
  - Mobile search button included
- **Export Updates**:
  - Updated index.ts to export all filter components
  - Maintains existing exports from other agents

### Implementation Details
- All filter components use shadcn/ui components
- Follows existing codebase patterns and styling
- Mock data included for tags with usage counts
- Proper TypeScript types from @vibechecc/types
- Accessible form controls with labels
- Filter state management via onChange callbacks

### Next Steps for Integration
- Search results page can now import SearchFilters from the index
- Backend search functions will provide actual tag lists
- Filter changes will update URL search params

---

## Integration Timeline

### Day 1: Foundation
- All agents create their base files
- Use mock data for development
- Define component interfaces

### Day 2-3: Implementation
- Agents work independently
- Regular sync on interfaces
- Test components in isolation

### Day 4: Integration
- Connect frontend to backend
- Wire up all components
- Fix integration issues

### Day 5: Polish
- Performance optimization
- Mobile testing
- Final UI tweaks

## Testing Checklist
- [ ] Command palette opens with Cmd+K
- [ ] Search suggestions appear as you type
- [ ] Results page shows filtered results
- [ ] Filters update URL parameters
- [ ] Mobile filters work in drawer
- [ ] Pagination/infinite scroll works
- [ ] Empty states show properly
- [ ] Loading states are smooth

## Success Metrics
- Search response time < 200ms
- Command palette opens instantly
- Smooth transitions between states
- Works well on mobile devices
- Accessible via keyboard navigation
